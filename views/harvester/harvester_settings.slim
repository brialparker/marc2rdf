h3 Edit Harvester: #{harvester.name}
div class="divdot inputf"  
  table class="genform"
    form id="edit_harvester_form" 
      tr
        td
        td: input[type="hidden" id="save_harvester_id" value=(harvester.id)]
      tr
        td name
        td: input[type="text" id="save_harvester_name" value=(harvester.name)]
      tr
        td description
        td: input[type="textfield" id="save_harvester_description" value=(harvester.description)]
      tr
        td protocol
        td
          select[id="save_harvester_protocol"]
            option[selected=("selected" if harvester.protocol == "http")] http
            option[selected=("selected" if harvester.protocol == "sparql")] sparql
        td http: generic xml harvester, sparql: not implemented yet
      tr
        td: hr
        td url settings
      tr
        td prefix
        td: input[type="text" id="save_harvester_url_prefix" value=(harvester.to_map.fetch(:url){{}}.fetch('prefix'){} )]
        td url string before search object
      tr
        td suffix
        td: input[type="text" id="save_harvester_url_suffix" value=(harvester.to_map.fetch(:url){{}}.fetch('suffix'){} )]
        td url string after search object
      tr
        td: hr
        td limits on harvesting
      tr
        td max_limit
        td: input[type="text" id="save_harvester_max_limit" value=(harvester.to_map.fetch(:limits){{}}.fetch('max_limit'){} )]
        td max records on a rdf store lookup, does not affect harvests from batch solutions
      tr
        td batch_limit
        td: input[type="text" id="save_harvester_batch_limit" value=(harvester.to_map.fetch(:limits){{}}.fetch('batch_limit'){} )]
        td number of records in each harvest
      tr
        td retry_limit
        td: input[type="text" id="save_harvester_retry_limit" value=(harvester.to_map.fetch(:limits){{}}.fetch('retry_limit'){} )]
        td how many times to retry connection 
      tr
        td delay
        td: input[type="text" id="save_harvester_delay" value=(harvester.to_map.fetch(:limits){{}}.fetch('delay'){} )]
        td wait (sec) between each connection 
      tr
        td: hr
        td local properties       
      tr
        td subject
        td
          select[id="save_harvester_local_subject"]
            option[selected=("selected" if harvester.to_map.fetch(:local){{}}.fetch('subject'){}.to_s == "work")] work
            option[selected=("selected" if harvester.to_map.fetch(:local){{}}.fetch('subject'){}.to_s == "edition")] edition
        td work: harvest to local Work, edition: harvest to local Edition
      tr
        td predicate
        td: input[type="text" id="save_harvester_local_predicate" value=(harvester.to_map.fetch(:local){{}}.fetch('predicate'){} )]
        td the predicate in local RDF store or batch to use for harvesting
      tr
        td object
        td: input[type="text" id="save_harvester_local_object" value=(harvester.to_map.fetch(:local){{}}.fetch('object'){} ) disabled="true"]
        td the object in local RDF store or batch to use for harvesting (NOT USED)
      tr
        td: hr
        td remote properties

      // NB! to parse namespaces as hash, we need to use class instead of id
      table[id="harvester_namespaces" class="genform"]
        tr
          td: button[type='button' class="add_table_row"]  = "add row"
          td namespace
          td url
        - unless harvester.remote.nil? or harvester.remote['namespaces'].nil? or harvester.remote['namespaces'].empty?
          - harvester.remote['namespaces'].each do |k,v|
            tr
              td
              td: input[type="text" class="harvester_namespace_prefix" value=(k)]
              td: input[type="text" class="harvester_namespace_url" value=(v)]
              td: button[type='button' class="remove_table_row"]  = "delete row"
                            
      // NB! to parse preserve predicates as hash, we need to use class instead of id
      table[id="harvester_predicates" class="genform"]
        tr
          td: button[type='button' class="add_table_row"]  = "add row"
          td predicate
          td datatype
          td xpath
          td regex_strip
        - unless harvester.remote.nil? or harvester.remote['predicates'].nil? or harvester.remote['predicates'].empty?
          - harvester.remote['predicates'].each do |k,v|
            tr
              td
              td: input[type="text" class="harvester_predicate" value=(k)]
              td
                select[class="harvester_datatype"]
                    option[selected=("selected" if v['datatype'] == "literal")] literal
                    option[selected=("selected" if v['datatype'] == "uri")] uri
              td: input[type="text" class="harvester_xpath" value=(v['xpath'])]
              td: input[type="text" class="harvester_regex_strip" value=(v['regex_strip'])]
              td: button[type='button' class="remove_table_row"]  = "delete row"

      tr
        td 
          button[type="button" id="save_harvester" class="gen"]  = "Save"
          button[type="button" id="delete_harvester" class="gen"]  = "Delete"
      tr
        td 
          button[type="button" id="test_harvester" class="gen"]  = "Test id >"
          input[type="text" id="test_harvester_id"] save before testing!
          
        td
          span[id="save_harvester_info" class="info" style="margin-left:48px"]
          span[id="save_harvester_error" class="error" style="margin-left:48px"]
// The test div
div id="harvester_test"
