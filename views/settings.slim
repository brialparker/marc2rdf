== render :slim, :'_header'

div class="main"
  h2 Repository Settings
  h3 Rdfstore
  
  div class="divdot inputf"  
    table class="genform"
      form id="change_rdfstore_settings_form" 
        - repo.repository_skeleton['rdfstore'].each do |key,value|
          tr
            td #{key}
            - if key == "store"
              td: input[type="text" id="#{key}" value="#{value}" disabled="true"]
            - elsif key == "auth_method"
              td: input[type="radio" id="#{key}" value="#{value}" checked="true"] #{value}
              tr
                td
                td: input[type="radio" id="#{key}" value="basic" ] basic
            - else
                td: input[type="text" id="#{key}" value="#{value}"]
        tr
          td: button[type="button" id="rdfstore_settings_save" class="gen"]  = "Save"
          td
            span[id="rdfstore_info" class="info" style="margin-left:48px"]
            span[id="rdfstore_error" class="error" style="margin-left:48px"]
          
  h3 Resource
 
  div class="divdot inputf"
    table class="genform"
      form id="change_resource_settings_form" 
        - repo.repository_skeleton['resource'].each do |key,value|
          tr
            td #{key}
            td: input[type="text" id="#{key}" value="#{value}"]
        tr
          td: button[type="button" id="resource_settings_save" class="gen"]  = "Save"
          td
            span[id="resource_info" class="info" style="margin-left:48px"]
            span[id="resource_error" class="error" style="margin-left:48px"]
                      
  h3 OAI harvester
  div class="divdot inputf"
    form id="change_harvester_settings_form" autocomplete="off"
      table class="genform"
        - repo.repository_skeleton['oai'].each do |key,value|
          tr
            td
              td #{key}
              - if key == "follow_redirects"
                - if value == false
                  td: input[type="radio" id="#{key}" value="true" ] true 
                  tr
                    td
                      td
                        td: input[type="radio" id="#{key}" value="#{value}" checked="true"] #{value}
                - else
                  td: input[type="radio" id="#{key}" value="#{value}" checked="true"] #{value}
                  tr
                    td
                      td
                        td: input[type="radio" id="#{key}" value="false" ] false
              // needs to parse as array, so need to use class instead of id
              - elsif key == "preserve_on_update"
                - value.each_with_index do |v, index|
                  tr
                    td
                      td
                        td: input[type="text" name="#{key}[#{index}]" class="#{key}" value="#{v}"]
              - else
                td: input[type="text" id="#{key}" value="#{value}"]
        tr
          td: button[type='button' id="oai_settings_save" class="gen"]  = "Save"
          td: button[type='button' id="settings_save" class="gen"]  = "Save all"
          td
            span[id="oai_info" class="info" style="margin-left:48px"]
            span[id="oai_error" class="error" style="margin-left:48px"]
            span[id="all_info" class="info" style="margin-left:48px"]
            span[id="all_error" class="error" style="margin-left:48px"]
  
  javascript:
    $(document).ready(function () {
      // ** save rdfstore settings
      $('button#rdfstore_settings_save').on('click', function() {
        request = $.ajax({
          url: '/settings',
          type: 'PUT',
          cache: false,
          data: { 
              rdfstore: {
              sparql_endpoint: $('input#sparql_endpoint').val(),
              sparul_endpoint: $('input#sparul_endpoint').val(),
              default_prefix: $('input#default_prefix').val(),
              default_graph: $('input#default_graph').val(),
              username: $('input#username').val(),
              password: $('input#password').val(),
              auth_method: $('input#auth_method').val()
              }},
          dataType: 'json'
        });

        request.done(function(data) {
          $('span#rdfstore_info').html("Saved rdfstore settings !").show().fadeOut(3000);
        });

        request.fail(function(jqXHR, textStatus, errorThrown) {
          $('span#rdfstore_error').html(jqXHR.responseText).show().fadeOut(5000);
        });
      });
      
      // ** save resource settings
      $('button#resource_settings_save').on('click', function() {
        request = $.ajax({
          url: '/settings',
          type: 'PUT',
          cache: false,
          data: { 
              resource: {
              base: $('input#base').val(),
              resource_path: $('input#resource_path').val(),
              resource_prefix: $('input#resource_prefix').val(),
              resource_identifier_field: $('input#resource_identifier_field').val(),
              resource_type: $('input#resource_type').val()
              }},
          dataType: 'json'
        });

        request.done(function(data) {
          $('span#resource_info').html("Saved resource settings !").show().fadeOut(3000);
        });

        request.fail(function(jqXHR, textStatus, errorThrown) {
          $('span#resource_info').html(jqXHR.responseText).show().fadeOut(5000);
        });
      });
      
      // ** save oai settings
      $('button#oai_settings_save').on('click', function() {
        var data = $('input:text[name=preserve_on_update[]]');
        var json = data.serializeArray();
        var preserve_array = [];
        $.each(json, function(i,v) {
          preserve_array.push(v.value);
        });
        //alert(preserve_array);
        request = $.ajax({
          url: '/settings',
          type: 'PUT',
          cache: false,
          data: { 
              oai: {
              repository_url: $('input#repository_url').val(),
              follow_redirects: $('input#follow_redirects').val(),
              parser: $('input#parser').val(),
              timeout: $('input#timeout').val(),
              preserve_on_update: preserve_array
              }},
          dataType: 'json'
        });

        request.done(function(data) {
          $('span#oai_info').html("Saved oai settings !").show().fadeOut(5000);
        });

        request.fail(function(jqXHR, textStatus, errorThrown) {
          $('span#oai_error').html(jqXHR.responseText).show().fadeOut(5000);
        });
      });      
    });
  == render :slim, :'_footer'
